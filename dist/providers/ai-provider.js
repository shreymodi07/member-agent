"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AIProvider = void 0;
const sdk_1 = __importDefault(require("@anthropic-ai/sdk"));
const openai_1 = __importDefault(require("openai"));
class AIProvider {
    constructor(config) {
        const provider = config?.provider || 'openai';
        let defaultModel = 'gpt-4';
        if (provider === 'anthropic') {
            defaultModel = 'claude-3-sonnet';
        }
        this.config = {
            apiKey: config?.apiKey || process.env.OPENAI_API_KEY || process.env.ANTHROPIC_API_KEY || '',
            model: config?.model || defaultModel,
            provider: provider,
            baseUrl: config?.baseUrl || ''
        };
        // Correct model if it doesn't match the provider
        if ((this.config.provider === 'openai' || this.config.provider === 'gpt-4') && this.config.model.startsWith('claude')) {
            this.config.model = 'gpt-4';
        }
        else if (this.config.provider === 'anthropic' && this.config.model.startsWith('gpt')) {
            this.config.model = 'claude-3-sonnet';
        }
        if (!this.config.apiKey) {
            throw new Error('API key is required. Set OPENAI_API_KEY or ANTHROPIC_API_KEY environment variable or provide it in config.');
        }
        if (this.config.provider === 'anthropic') {
            this.anthropic = new sdk_1.default({
                apiKey: this.config.apiKey,
            });
        }
        else if (this.config.provider === 'openai' || this.config.provider === 'gpt-4') {
            this.openai = new openai_1.default({
                apiKey: this.config.apiKey,
                baseURL: this.config.baseUrl || undefined,
            });
        }
    }
    async generateText(prompt) {
        // 'gpt-4' is treated as OpenAI provider for convenience.
        switch (this.config.provider) {
            case 'openai':
            case 'gpt-4':
                return await this.generateOpenAI(prompt);
            case 'anthropic':
                return await this.generateAnthropic(prompt);
            default:
                throw new Error(`Unsupported provider: ${this.config.provider}`);
        }
    }
    async generateOpenAI(prompt) {
        try {
            if (!this.openai) {
                throw new Error('OpenAI client not initialized');
            }
            const completion = await this.openai.chat.completions.create({
                model: this.config.model || 'gpt-4',
                messages: [
                    { role: 'user', content: prompt }
                ],
                max_tokens: 4000
            });
            const content = completion.choices[0]?.message?.content;
            if (content) {
                return content;
            }
            else {
                throw new Error('Unexpected response from OpenAI API');
            }
        }
        catch (error) {
            console.warn(`OpenAI API error: ${error.message}, falling back to mock response`);
            return this.generateMockResponse(prompt);
        }
    }
    async generateAnthropic(prompt) {
        try {
            if (!this.anthropic) {
                throw new Error('Anthropic client not initialized');
            }
            const message = await this.anthropic.messages.create({
                model: this.config.model,
                max_tokens: 4000,
                messages: [{
                        role: 'user',
                        content: prompt
                    }]
            });
            const content = message.content[0];
            if (content.type === 'text') {
                return content.text;
            }
            else {
                throw new Error('Unexpected response type from Anthropic API');
            }
        }
        catch (error) {
            console.warn(`Anthropic API error: ${error.message}, falling back to mock response`);
            return this.generateMockResponse(prompt);
        }
    }
    generateMockResponse(prompt) {
        if (prompt.includes('specification')) {
            return `# Technical Specification

## Overview
This is a mock specification generated by the Teladoc AI agent.

## Requirements
- Feature requirements will be analyzed
- Security considerations included
- HIPAA compliance ensured
- Performance metrics defined

## Implementation
- Code structure recommendations
- API design patterns
- Database schema considerations
- Testing strategies

## Security & Compliance
- PHI data handling protocols
- Access control requirements
- Audit logging specifications
- Encryption requirements

*Note: This is a mock response. In production, this would be generated by a real AI model.*`;
        }
        if (prompt.includes('code review')) {
            return `# Code Review Report

## Summary
The code has been analyzed for security, performance, and maintainability issues.

## Security Issues
**File: example.ts Line: 15**
- Severity: High
- Category: security
- Issue: Potential SQL injection vulnerability
- Suggestion: Use parameterized queries

## Performance Issues
**File: example.ts Line: 32**
- Severity: Medium
- Category: performance
- Issue: Inefficient database query
- Suggestion: Add proper indexing

## Compliance Issues
**File: example.ts Line: 45**
- Severity: Critical
- Category: compliance
- Issue: PHI data logged without encryption
- Suggestion: Remove sensitive data from logs

*Note: This is a mock response. In production, this would be generated by a real AI model.*`;
        }
        if (prompt.includes('security')) {
            return `# Security Analysis Report

## Critical Issues
**File: auth.ts Line: 23**
- Severity: Critical
- Category: vulnerability
- CWE: CWE-798
- Title: Hardcoded credentials
- Description: API key found in source code
- Remediation: Move credentials to environment variables

## High Priority Issues
**File: api.ts Line: 67**
- Severity: High
- Category: vulnerability
- CWE: CWE-89
- Title: SQL Injection
- Description: Unsanitized user input in SQL query
- Remediation: Use parameterized queries

## HIPAA Compliance Issues
**File: logger.ts Line: 12**
- Severity: High
- Category: compliance
- Title: PHI exposure in logs
- Description: Patient data logged without encryption
- Remediation: Implement PHI sanitization in logging

*Note: This is a mock response. In production, this would be generated by a real AI model.*`;
        }
        return 'Mock AI response generated successfully.';
    }
}
exports.AIProvider = AIProvider;
//# sourceMappingURL=ai-provider.js.map